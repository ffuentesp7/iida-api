// <auto-generated />
using System;
using Iida.Api.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Iida.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Iida.Shared.Models.EvapotranspirationMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp")
                        .HasColumnOrder(2);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("url")
                        .HasColumnOrder(3);

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("version")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("evapotranspiration_map");
                });

            modelBuilder.Entity("Iida.Shared.Models.MeteorologicalData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp")
                        .HasColumnOrder(2);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("url")
                        .HasColumnOrder(3);

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("version")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("meteorological_data");
                });

            modelBuilder.Entity("Iida.Shared.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<double>("CloudCover")
                        .HasColumnType("double")
                        .HasColumnName("cloud_cover")
                        .HasColumnOrder(6);

                    b.Property<DateTimeOffset?>("End")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end")
                        .HasColumnOrder(5);

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset?>("Start")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start")
                        .HasColumnOrder(4);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status")
                        .HasColumnOrder(2);

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp")
                        .HasColumnOrder(3);

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("version")
                        .HasColumnOrder(9);

                    b.HasKey("Id");

                    b.ToTable("order");
                });

            modelBuilder.Entity("Iida.Shared.Models.EvapotranspirationMap", b =>
                {
                    b.HasOne("Iida.Shared.Models.Order", "Order")
                        .WithMany("EvapotranspirationMaps")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Iida.Shared.Models.MeteorologicalData", b =>
                {
                    b.HasOne("Iida.Shared.Models.Order", "Order")
                        .WithMany("MeteorologicalDatas")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Iida.Shared.Models.Order", b =>
                {
                    b.Navigation("EvapotranspirationMaps");

                    b.Navigation("MeteorologicalDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
